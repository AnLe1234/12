// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = Array.new(16);
        let screen[0] = 1;
        let screen[1] = 2;
        let screen[2] = 4;
        let screen[3] = 8;
        let screen[4] = 16;
        let screen[5] = 32;
        let screen[6] = 64;
        let screen[7] = 128;
        let screen[8] = 256;
        let screen[9] = 512;
        let screen[10] = 1024;
        let screen[11] = 2048;
        let screen[12] = 4096;
        let screen[13] = 8192;
        let screen[14] = 16384;
        let screen[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit;
        let address =16384+ (32*y) + (x/16);
        let value = Memory.peek(address);
        let bit =  x - 16 * (x / 16); // (x%16)
        if (color) {
            let value = value | screen[bit];
        } else {
            let value = value & ~screen[bit];
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, temp, diff;
        let a = 0;
        let b = 0;
        let diff = 0;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy = 0) {
            while (~(a = dx)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }
        if (dx = 0) {
            while (~(b = dy)) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b = 1;
            }
            return;
        }
        if (dy < 0) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                let diff = (a*dy) - (b*dx);
                if (diff < 0) {
                    let a = a + 1;
                } else {
                    let b = b + 1;
                }
            }
        } else {
            while ((a < (dx+1)) & (b > (dy+1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                let diff = (a*dy) - (b*dx);
                if (diff < 0) {
                    let a = a + 1;
                } else {
                    let b = b - 1;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, temp;
        let a = 0;
        let b = 0;

        let dx = x2 - x1;
        let dy = y2 - y1;

        while (b < dy) {
            while (a < dx) {
                do Screen.drawPixel(x1 + a, y1 + b);
                let a = a + 1;
            }
            let a = 0;
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSquared;
        let dy = -r;
        let rSquared = r*r;

        while (dy < r) {
            let dx = Math.sqrt(rSquared - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
        }
        return;
    }
}
